<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.1
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>HTTP权威指南 - By 李宏吉</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.moon.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<div class='center'>
<h2>HTTP权威指南-WEB基础</h2>
<h3>1.HTTP概述</h3>
</div>
</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<pre>
1.1 HTTP——因特网的多媒体信使
1.2 Web 客户端和服务器
1.3 资源
    1.3.1 媒体类型
    1.3.2 URI7
    1.3.3 URL
    1.3.4 URN8
1.4 事务
    1.4.1 方法
    1.4.2 状态码
    1.4.3 Web 页面中可以包含多个对象
1.5 报文
1.6 连接
    1.6.1 TCP/IP
    1.6.2 连接、IP 地址及端口号
    1.6.3 使用 Telnet 实例
1.7 协议版本18
1.8 Web 的结构组件
    1.8.1 代理
    1.8.2 缓存
    1.8.3 网关
    1.8.4 隧道
    1.8.5 Agent 代理
1.9 起始部分的结束语
</pre>
</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>HTTP——因特网的多媒体信使</h2>
<p>HTTP 使用的是可靠的数据传输协议，因此即使数据来自地球的另一端，它也能够确保数据在传输的过程中不会被损坏或产生混乱。这样，用户在访问信息时就不用担心其完整性了，因此对用户来说，这是件好事。而对因特网应用程序开发人员来说也同样如此，因为这样就无需担心 HTTP 通信会在传输过程中被破坏、复制或产生畸变了。开发人员可以专注于应用程序特有细节的编写，而不用考虑因特网中存在的一些缺陷和问题。</p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>Web客户端和服务器</h2>
<p>    浏览一个页面时 (如<a href="http://www.oreilly.com/index.html" target="_blank">http://www.oreilly.com/index.html</a>) ,浏览器会向服务器www.oreilly.com发送一条HTTP请求，如果成功，就将对象、对象类型、对象长度以及其他一些信息放在HTTP响应中发送给客户端。</p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>资源</h2>
<p>    Web服务器是Web资源（Webresource）的宿主。Web资源是Web内容的源头。最简单的Web资源就是Web服务器文件系统中的静态文件。这些文件可以包含任意内容：文本文件、HTML文件、微软的Word文件、Adobe的Acrobat文件、JPEG图片文件、AVI电影文件，或所有其他你能够想到的格式。</p>
<p>    但资源不一定非得是静态文件。资源还可以是根据需要生成内容的软件程序。这些动态内容资源可以根据你的身份、所请求的信息或每天的不同时段来产生内容。它们可以为你显示照相机中活生生的照片，也可以帮你进行股票交易，搜索房产数据库，或者从在线商店中购买礼物。</p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>媒体类型</h2>
<p>    因特网上有数千种不同的数据类型，HTTP仔细地给每种要通过Web传输的对象都打上了名为MIME类型（MIMEType）的数据格式标签。
    最初设计MIME（MultipurposeInternetMailExtension，多用途因特网邮件扩展）是为了解决在不同的电子邮件系统之间搬移报文时存在的问题。
    MIME在电子邮件系统中工作得非常好，因此HTTP也采纳了它，用它来描述并标记多媒体内容。</p>
<p>    Web服务器会为所有HTTP对象数据附加一个MIME类型。当Web浏览器从服务器中取回一个对象时，会去查看相关的MIME类型，看看它是否知道应该如何处理这个对象。
    大多数浏览器都可以处理数百种常见的对象类型：显示图片文件、解析并格式化HTML文件、通过计算机声卡播放音频文件，或者运行外部插件软件来处理特殊格式的数据。</p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>媒体类型</h2>
<p>    MIME类型是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间由一条斜杠来分隔。</p>
<ul>
<li>HTML 格式的文本文档由 text/html 类型来标记。</li>
<li>普通的 ASCII 文本文档由 text/plain 类型来标记。</li>
<li>JPEG 版本的图片为 image/jpeg 类型。</li>
<li>GIF 格式的图片为 image/gif 类型。</li>
<li>Apple 的 QuickTime 电影为 video/quicktime 类型。</li>
<li><p>微软的 PowerPoint 演示文件为 application/vnd.ms-powerpoint 类型。</p>
<p>常见的 MIME 类型有数百个，实验性或用途有限的 MIME 类型则更多。MIME类型可以在Google Dev Tools中Network中的content-type中查看</p>
</li>
</ul>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>资源定位符</h2>
<ul>
<li>URI：每个Web服务器资源都有一个名字。服务器资源名称被称为URI（统一资源标识符，Uniform Resource Identifier,URI），包括URL和URN。</li>
<li>URL：统一资源定位符，说明了协议、服务器和本地资源。URL描述了服务器上资源的特定位置，可以准确的从一个精确、固定位置获取资源<ul>
<li>URL第一部分称为方案（schema），说明了访问资源的协议类型。通常是http协议(http://)</li>
<li>第二部分提供了服务器的地址</li>
<li>其余部分指定服务器上的某个资源
目前为止，所有URI都是URL。</li>
</ul>
</li>
<li>URN：统一资源名，作为特定内容的唯一名称使用，与所在资源地址无关，这些资源可以被四处迁移。比如，不论因特尔标准文档RFC 2141位于何方，通可以用下列URN命名：urn:ietf:rfc:2141。目前仍然处于试验阶段。</li>
</ul>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>事务</h2>
<p>    一个HTTP事务由一条请求命令和一个相应结果组成，这种通信通过为名HTTP报文的格式化数据块进行。</p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>方法</h2>
<p>    HTTP支持几种不同的请求命令，这些命令被称为HTTP方法（HTTP method）。常见的方法有：Get,Put,Delete,Post,Head,Petch,OPTIONS。具体信息查看restful.api</p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>报文</h2>
<p>    http报文由一行行简单的字符串组成。</p>
<ul>
<li>起始行：报文第一行就是起始行，请求报文中说明要做什么（Method url Schema/version），相应报文中说明相应状况(Schema/version status)</li>
<li>头部字段：起始行后面有一行或者多行首部字段。每个首部字段包含一个名字和一个值，中间以:分隔。尾部以一个空行结束。</li>
<li>空行之后就是一个可选的报文主题数据。主题数据可以包含任意格式数据（包括二进制的音频，图片，视频，软件程序）。当然也可以包括文本。</li>
</ul>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>头部信息</h2>
<ul>
<li>请求头：accept(text/html,application/xhtml+xml),accept-language(zh-CN,zh;q=0.8,en;q=0.6),accept-encoding(gzip, deflate, sdch),user-agent(用户代理),cookie,host(请求服务器),cache-control(是否缓存),connection(keep-alive),Pragma(特定指令，比如no-cache)</li>
<li>响应头：data,server（apache,ngnix）,last-modified,content-length（长度）,content-type(类型)，Content-Encoding（gzip），cache-control(是否缓存),connection(keep-alive)，Set-Cookie</li>
</ul>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>连接</h2>
<p>    传输协议控制（Transmission Control Protocol,TCP）。HTTP 无需操心网络通信细节，交给了通用可靠的传输协议TCP/IP，它提供了。</p>
<ul>
<li>无差错的数据传输</li>
<li>按序传输（数据总是按照发送的顺序到达）</li>
<li>未分段的数据流（可以在任意时刻任何尺寸把数据发出去）</li>
</ul>
<p>因特网本身就是基于TCP/IP的，像全世界提供了计算机和网络设备常用的层次化分组交换网络协议集。</p>
<p>只要建立TCP/IP连接，客户端和服务器的报文交换就不会丢失，不会被破坏，也不会再接收时候出现错序。</p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>连接</h2>
<p>    我们来发一条请求</p>
<pre><code>telnet 127.0.0.1 3001
Trying 127.0.0.1...
Connected to localhost.
Escape character is &#39;^]&#39;.
GET / HTTP/1.1

HTTP/1.1 200 OK
Content-Type: text/plain; charset=utf-8
Content-Length: 3
Date: Sun, 24 Apr 2016 04:37:18 GMT
Connection: keep-alive

abc
</code></pre><p>    Telnet可以很好的模拟器HTTP客户端，但是不能作为服务器使用。
    MAC系统可以使用curl命令,curl命令的使用方法,请参考<a href="https://github.com/594237406/linux/blob/master/1.curl/readme.MD" target="_blank">https://github.com/594237406/linux/blob/master/1.curl/readme.MD</a></p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>协议版本</h2>
<ul>
<li><p>HTTP/0.9:HTTP的1991原型版本称为HTTP/0.9。这个协议有很多严重缺陷，只能用于老客户端的交互。只支持Get方法，不支持多媒体内容的mime类型,header,版本号。很快就被1.0取代。</p>
</li>
<li><p>HTTP/1.0:添加了版本号，header,一些额外的方法以及对多媒体对象处理。集合了一系列的最佳实践，得到广泛的应用。</p>
</li>
<li><p>HTTP/1.0+:90年代中叶，随着web客户端和服务器飞快奋战，添加了很多特性比如持久keep-alive连接，虚拟主机支持以及代理连接支持都被加入到HTTP之中。并非官方事实标准，非正式的HTTP扩展版本被称为HTTP/1.0+。</p>
</li>
<li><p>HTTP/1.1:重点关注校正HTTP设计的结构缺陷，语义明确，引入重要的性能优化措施以及删除不好的特性。是目前使用的HTTP版本</p>
</li>
<li><p>HTTP-NG（又名2.0）:HTTP-NG是HTTP/1.1后续结构的原型建议，重点关注的性能大幅优化，研究工作终止于1998年。</p>
</li>
</ul>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h2>Web结构组件</h2>
<p>    以下介绍其他一些比较重要的应用程序</p>
<h3>代理：位于客户端和服务器中间的HTTP中间体。接收所有客户端HTTP请求，转发给服务器（可能对请求修改后转发）。对用户来说，这些程序就叫做代理，代表用户访问服务器。</h3>
<p>    出于安全考虑，通常会将代理作为转发所有Web流量的可信任中间点使用。因为代理可以进行请求响应过滤。比如对响应的下载文件的病毒检测，或者对请求的一些视频网站过滤。</p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h3>缓存：HTTP仓库，用于页面的副本保存在离客户端更近的地方。缓存也叫做代理缓存是一种特殊的HTTP代理服务器。可以将代理传送常用文档复制保存起来，下次请求统一文档的客户端就可以享受缓存的私有副本提供的服务。（服务器端缓存，浏览器缓存是另一种机制）</h3>
<p>    客户端从附近的缓存下载文档会比远程web服务器下载快很多。HTTP定义了很多功能使缓存更搞笑，规范了文档的新鲜度和缓存内容隐私性。</p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h3>网关：连接其他应用的特殊Web服务器。是一种特殊服务器，作为其他服务器的中间实体使用。通常将HTTP协议转换成其他协议。网关接收请求就好像自己是源服务器一样，客户端并不知道自己正和一个网关通信。</h3>
<p>    例如：一个HTTP/FTP网关会通过HTTP请求接收对FTP URI的请求，并通过FTP协议获得文档。然后封装成一条HTTP请求发送给客户端。</p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h3>隧道：“HTTP隧道技术”就是把所有要传送的数据全部封装到HTTP协议里进行传送。</h3>
<p>    常常使用木马的用户一定对木马所使用的反弹连接技术、线程插入技术等耳熟能详，但是对“HTTP隧道技术”可能就不甚了解了，那到底什么是“HTTP隧道技术”呢？我们知道，使用了“反弹连接技术”的远程控件软件只能访问拨号上网的服务端以及局域网里通过NAT代理上网的服务端。</p>
<p>    而使用“HTTP隧道技术”以后，远程控件软件可以访问到局域网里通过HTTP、SOCKS4/5代理上网的服务端。简单来说，“HTTP隧道技术”就是把所有要传送的数据全部封装到HTTP协议里进行传送。</p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h3>隧道：</h3>
<p>    因此，在互联网上可以访问到局域网里通过HTTP、SOCKS4/5代理上网的电脑，而且也不会有什么防火墙会拦截。</p>
<p>    可以这么说，使用“HTTP隧道技术”的远程控制软件几乎支持了所有的上网方式，如：拨号上网、ADSL、Cable Modem、NAT透明代理、HTTP的GET型和CONNECT型代理、SOCKS4代理、SOCKS5代理等。
    　　
    通过使用反弹连接技术和HTTP隧道技术后，服务端程序的打开端口一般开为80（即用于网页浏览的端口）。这样稍微疏忽一点用户就会以为是自己在浏览网页，而防火墙也会同样这么认为，再加上反弹连接型木马的服务端主动连接客户端，这样就可以轻易突破防火墙的限制。</p>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/bg.jpg')"><section class="slide-wrapper"><article>
<h3>Agent：发送自动HTTP请求的Web客户端,终端层面代理。所有发布web请求的应用程序都是http agent代理。比如web浏览器，网络蜘蛛，网络爬虫，网络机器人等。</h3>

</article></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.1</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'cards',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>
<link rel="stylesheet" href="./css/ppt.css">

<!--placeholder-->
</body>
</html>
